@page "/fetchdata"
@inject HttpClient Http
@inject UIStateService UIStateService
<ion-content class="ion-padding">
    <p>This component demonstrates fetching data from the server.</p>


    <IonLoading Visible="@loading" message="Loading the weather"></IonLoading>

    <ion-grid>
        <ion-row>
            <ion-col>
                <div>Date</div>
            </ion-col>
            <ion-col>
                <div>Temp. (C)</div>
            </ion-col>
            <ion-col>
                <div>Temp. (F)</div>
            </ion-col>
            <ion-col>
                <div>Summary</div>
            </ion-col>

        </ion-row>
        @if (forecasts != null)
        {
            @foreach (var forecast in forecasts)
            {
                <ion-row>
                    <ion-col>
                        <div>@forecast.Date.ToShortDateString()</div>
                    </ion-col>
                    <ion-col>
                        <div>@forecast.TemperatureC</div>
                    </ion-col>
                    <ion-col>
                        <div>@forecast.TemperatureF</div>
                    </ion-col>
                    <ion-col>
                        <div>@forecast.Summary</div>
                    </ion-col>
                </ion-row>
            }
        }
    </ion-grid>
</ion-content>

@code {

    private bool loading => forecasts is null;
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        UIStateService.Title = "Weather forecast";
        _ = Task.Run(async () =>
        {
            await Task.Delay(5000);
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
            await InvokeAsync(StateHasChanged);
        });
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int) (TemperatureC / 0.5556);
    }

}