@page "/demo"
@inject UIStateService UiStateService

<ion-content class="ion-padding">
    <section>
        <ion-button @onclick="ToggleLoader" expand="block">Toggle loader (currently @VisibleLoader)</ion-button>
        <ion-button @onclick="ToggleAlert" expand="block">Toggle alert (currently @VisibleAlert)</ion-button>
        <ion-button @onclick="ToggleModal" expand="block">Toggle modal (currently @VisibleModal)</ion-button>
        <ion-button @onclick="ToggleActionSheet" expand="block">Toggle action sheet (currently @VisibleActionSheet)</ion-button>
        <ion-list>
            @foreach (var log in Logs)
            {
                <ion-item>
                    <ion-label>
                        @log
                    </ion-label>
                </ion-item>
            }
        </ion-list>
    </section>
    <IonModal @bind-Visible="@VisibleModal">
        <ion-header>
            <ion-toolbar>
                <ion-title>Modal Header</ion-title>
                <ion-buttons slot="primary">
                    <ion-button @onclick="ToggleModal">
                        <ion-icon slot="icon-only" name="close"></ion-icon>
                    </ion-button>
                </ion-buttons>
            </ion-toolbar>
        </ion-header>
        <ion-content class="ion-padding">
            Modal Content

        </ion-content>
    </IonModal>
    <IonLoading @bind-Visible="@VisibleLoader" message="eeee" backdrop-dismiss="true"></IonLoading>
    <IonAlert @bind-Visible="@VisibleAlert" message="eeee" Buttons="buttons" Inputs="inputs" backdrop-dismiss="true"></IonAlert>
    <IonActionSheet t @bind-Visible="@VisibleActionSheet" Buttons="actionSheetButtons" header="An action sheet!"></IonActionSheet>
</ion-content>

@code {

    public IonAlert.IonAlertButton[] buttons;
    public IonActionSheet.IonActionSheetButton[] actionSheetButtons;
    public IonAlert.IonAlertInput[] inputs;
    public List<string> Logs = new List<string>();
    private bool _visibleAlert;
    private bool _visibleActionSheet;
    private bool _visibleModal;
    private bool _visibleLoader;

    public bool VisibleLoader
    {
        get => _visibleLoader;
        set
        {
            Logs.Add($"VisibleLoaderChanged {value}");
            _visibleLoader = value;
        }
    }

    public bool VisibleAlert
    {
        get => _visibleAlert;
        set
        {
            Logs.Add($"VisibleAlertChanged {value}");
            _visibleAlert = value;
        }
    }

    public bool VisibleActionSheet
    {
        get => _visibleActionSheet;
        set
        {
            Logs.Add($"VisibleActionSheetChanged {value}");
            _visibleActionSheet = value;
        }
    }

    public bool VisibleModal
    {
        get => _visibleModal;
        set
        {
            Logs.Add($"VisibleModalChanged {value}");
            _visibleModal = value;
        }
    }

    protected override void OnInitialized()
    {
        UiStateService.Title = "Demo Components";
        buttons = new[]
        {
            new IonAlert.IonAlertButton()
            {
                Options = new Dictionary<string, object>()
                {
                    {"text", "a button!"},
                    {"role", "customrole"}
                },
                Handler = o =>
                {
                    var vals = string.Join(",", o.Options.Select(pair => $"{pair.Key}={pair.Value}").ToArray());
                    Logs.Add($"1st option clicked! {(vals)}");
                    return Task.CompletedTask;
                }
            },
            new IonAlert.IonAlertButton()
            {
                Options = new Dictionary<string, object>()
                {
                    {"text", "Cancel"},
                    {"role", "cancel"}
                },
                Handler = o =>
                {
                    var vals = string.Join(",", o.Options.Select(pair => $"{pair.Key}={pair.Value}").ToArray());
                    Logs.Add($"cancel clicked! {vals}");
                    return Task.CompletedTask;
                }
            }
        };
        actionSheetButtons = new[]
        {
            new IonActionSheet.IonActionSheetButton()
            {
                Options = new Dictionary<string, object>()
                {
                    {"text", "a button!"},
                    {"icon", "caret-forward-circle"},
                    {"role", "customrole"}
                },
                Handler = o =>
                {
                    var vals = string.Join(",", o.Options.Select(pair => $"{pair.Key}={pair.Value}").ToArray());
                    Logs.Add($"1st option clicked! {(vals)}");
                    return Task.CompletedTask;
                }
            },
            new IonActionSheet.IonActionSheetButton()
            {
                Options = new Dictionary<string, object>()
                {
                    {"text", "Cancel"},
                    {"icon", "cancel"},
                    {"role", "cancel"}
                },
                Handler = o =>
                {
                    var vals = string.Join(",", o.Options.Select(pair => $"{pair.Key}={pair.Value}").ToArray());
                    Logs.Add($"cancel clicked! {vals}");
                    return Task.CompletedTask;
                }
            }
        };
        inputs = new[]
        {
            new IonAlert.IonAlertInput()
            {
                Options = new Dictionary<string, object>()
                {
                    {"type", "text"},
                    {"label", "Please tell us about yourself"},
                    {"placeholder", "14/f/cali"},
                    {"name", "personalDescription"},
                    {"id", "alert-personalDescription"}
                }
            }
        };
        StateHasChanged();
    }

    private void ToggleLoader()
    {
        VisibleLoader = !VisibleLoader;
    }

    private void ToggleAlert()
    {
        VisibleAlert = !VisibleAlert;
    }

    private void ToggleModal()
    {
        VisibleModal = !VisibleModal;
    }

    private void ToggleActionSheet()
    {
        VisibleActionSheet = !VisibleActionSheet;
    }

}